Day 0 of learning:
--------------------------
Offical documentation:
https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/
https://docs.python.org/3/library/venv.html

Virtual Environments and Packages:
----------------------------------
Introduction:
-------------
	Python applications will often use packages and modules that don’t come as part of the standard library. Applications will sometimes 
need a specific version of a library. The application may require that a particular bug has been fixed or the application may 
be written using an obsolete version of the library’s interface.

Creating Virtual Environments:
------------------------------
	venv is used to create and manage virtual environments. venv will usually install the most recent version of Python 
that is available. If you have multiple versions of Python on your system, you can select a specific Python version by running python3 
or whichever version you configure.
	
	To create a virtual environment, run the venv module as a script with the project directory path:
			python3 -m venv {Project-Folder}
	
	Once you’ve created a virtual environment, you may activate it.
	On Windows, run:
		{Project-Folder}\Scripts\activate.bat
		

syntax [bash]:
	$ source ~/envs/tutorial-env/bin/activate
	(tutorial-env) $ python
	Python 3.5.1 (default, May  6 2016, 10:59:36)
	...
	>>> import sys
	>>> sys.path
	['', '/usr/local/lib/python35.zip', ...,
	'~/envs/tutorial-env/lib/python3.5/site-packages']
	>>>
	
Managing Packages with pip
	You can install, upgrade, and remove packages using a module called pip. By default pip will install packages from the Python Package Index, 
<https://pypi.org>. You can browse the Python Package Index by going to it in your web browser, or you can use pip’s limited search feature:
syntax:
	(tutorial-env) $ pip search astronomy
	skyfield               - Elegant astronomy for Python
	gary                   - Galactic astronomy and gravitational dynamics.
	novas                  - The United States Naval Observatory NOVAS astronomy library
	astroobs               - Provides astronomy ephemeris to plan telescope observations
	PyAstronomy            - A collection of astronomy related tools for Python.
	...
pip has number of subcommands: “search”, “install”, “uninstall”, “freeze”, etc.

	You can install the latest version of a package by specifying a package’s name:
syntax:
	(tutorial-env) $ python -m pip install novas
	Collecting novas
	Downloading novas-3.1.1.3.tar.gz (136kB)
	Installing collected packages: novas
	Running setup.py install for novas
	Successfully installed novas-3.1.1.3
You can also install a specific version of a package by giving the package name followed by == and the version number:
syntax:
	(tutorial-env) $ python -m pip install requests==2.6.0
	Collecting requests==2.6.0
	Using cached requests-2.6.0-py2.py3-none-any.whl
	Installing collected packages: requests
	Successfully installed requests-2.6.0
If you re-run this command, pip will notice that the requested version is already installed and do nothing. 
You can supply a different version number to get that version
You can run pip install --upgrade to upgrade the package to the latest version:
syntax:
	(tutorial-env) $ python -m pip install --upgrade requests
	Collecting requests
	Installing collected packages: requests
	Found existing installation: requests 2.6.0
    Uninstalling requests-2.6.0:
    Successfully uninstalled requests-2.6.0
	Successfully installed requests-2.7.0
pip uninstall followed by one or more package names will remove the packages.

pip show will display information about a particular package:
syntax:
	(tutorial-env) $ pip show requests
	---
	Metadata-Version: 2.0
	Name: requests
	Version: 2.7.0
	Summary: Python HTTP for Humans.
	Home-page: http://python-requests.org
	Author: Kenneth Reitz
	Author-email: me@kennethreitz.com
	License: Apache 2.0
	Location: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages
	Requires:
pip list will display all of the packages installed in the virtual environment:
syntax:
	(tutorial-env) $ pip list
	novas (3.1.1.3)
	numpy (1.9.2)
	pip (7.0.3)
	requests (2.7.0)
	setuptools (16.0)
pip freeze will produce a similar list of the installed packages, but the output uses the format that pip install expects. A common convention is to put this list in a requirements.txt file:
syntax:
	(tutorial-env) $ pip freeze > requirements.txt
	(tutorial-env) $ cat requirements.txt
	novas==3.1.1.3
	numpy==1.9.2
	requests==2.7.0
The requirements.txt can then be committed to version control and shipped as part of an application. Users can then install all the necessary packages with install -r:
syntax:
	(tutorial-env) $ python -m pip install -r requirements.txt
	Collecting novas==3.1.1.3 (from -r requirements.txt (line 1))
	...
	Collecting numpy==1.9.2 (from -r requirements.txt (line 2))
	...
	Collecting requests==2.7.0 (from -r requirements.txt (line 3))
	...
	Installing collected packages: novas, numpy, requests
	Running setup.py install for novas
	Successfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0
	
Installing pip
	pip is the reference Python package manager. It’s used to install and update packages. You’ll need to make sure you have the latest version of pip installed.

The Python installers for Windows include pip. You should be able to access pip using:
Syntax:
	py -m pip --version
	pip 9.0.1 from c:\python36\lib\site-packages (Python 3.6.1)

You can make sure that pip is up-to-date by running:
syntax:
	py -m pip install --upgrade pip
	
	